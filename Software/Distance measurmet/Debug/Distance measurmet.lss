
Distance measurmet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000007b2  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  00000860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001272  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000947  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fe  00000000  00000000  000033a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	cf 00       	.word	0x00cf	; ????
  5a:	e8 00       	.word	0x00e8	; ????
  5c:	00 01       	movw	r0, r0
  5e:	00 01       	movw	r0, r0
  60:	00 01       	movw	r0, r0
  62:	00 01       	movw	r0, r0
  64:	00 01       	movw	r0, r0
  66:	00 01       	movw	r0, r0
  68:	00 01       	movw	r0, r0
  6a:	00 01       	movw	r0, r0
  6c:	00 01       	movw	r0, r0
  6e:	00 01       	movw	r0, r0
  70:	00 01       	movw	r0, r0
  72:	00 01       	movw	r0, r0
  74:	00 01       	movw	r0, r0
  76:	00 01       	movw	r0, r0
  78:	00 01       	movw	r0, r0
  7a:	00 01       	movw	r0, r0
  7c:	00 01       	movw	r0, r0
  7e:	00 01       	movw	r0, r0
  80:	00 01       	movw	r0, r0
  82:	00 01       	movw	r0, r0
  84:	00 01       	movw	r0, r0
  86:	00 01       	movw	r0, r0
  88:	00 01       	movw	r0, r0
  8a:	00 01       	movw	r0, r0
  8c:	00 01       	movw	r0, r0
  8e:	00 01       	movw	r0, r0
  90:	00 01       	movw	r0, r0
  92:	00 01       	movw	r0, r0
  94:	9d 00       	.word	0x009d	; ????
  96:	b6 00       	.word	0x00b6	; ????
  98:	cf 00       	.word	0x00cf	; ????
  9a:	e8 00       	.word	0x00e8	; ????
  9c:	0d 01       	movw	r0, r26
  9e:	26 01       	movw	r4, r12
  a0:	3f 01       	movw	r6, r30
  a2:	58 01       	movw	r10, r16
  a4:	70 01       	movw	r14, r0
  a6:	70 01       	movw	r14, r0
  a8:	70 01       	movw	r14, r0
  aa:	70 01       	movw	r14, r0
  ac:	70 01       	movw	r14, r0
  ae:	70 01       	movw	r14, r0
  b0:	70 01       	movw	r14, r0
  b2:	70 01       	movw	r14, r0
  b4:	70 01       	movw	r14, r0
  b6:	70 01       	movw	r14, r0
  b8:	70 01       	movw	r14, r0
  ba:	70 01       	movw	r14, r0
  bc:	70 01       	movw	r14, r0
  be:	70 01       	movw	r14, r0
  c0:	70 01       	movw	r14, r0
  c2:	70 01       	movw	r14, r0
  c4:	70 01       	movw	r14, r0
  c6:	70 01       	movw	r14, r0
  c8:	70 01       	movw	r14, r0
  ca:	70 01       	movw	r14, r0
  cc:	70 01       	movw	r14, r0
  ce:	70 01       	movw	r14, r0
  d0:	70 01       	movw	r14, r0
  d2:	70 01       	movw	r14, r0
  d4:	70 01       	movw	r14, r0
  d6:	70 01       	movw	r14, r0
  d8:	70 01       	movw	r14, r0
  da:	70 01       	movw	r14, r0
  dc:	0d 01       	movw	r0, r26
  de:	26 01       	movw	r4, r12
  e0:	3f 01       	movw	r6, r30
  e2:	58 01       	movw	r10, r16

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e2 eb       	ldi	r30, 0xB2	; 178
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	aa 37       	cpi	r26, 0x7A	; 122
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	aa e7       	ldi	r26, 0x7A	; 122
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a2 38       	cpi	r26, 0x82	; 130
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <main>
 11a:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <DIO_SET_PIN_DIR>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_SET_PIN_DIR(char port , char pin , char dir)
{
switch(port)
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e1 54       	subi	r30, 0x41	; 65
 128:	f1 09       	sbc	r31, r1
 12a:	e4 32       	cpi	r30, 0x24	; 36
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <DIO_SET_PIN_DIR+0x10>
 130:	67 c0       	rjmp	.+206    	; 0x200 <DIO_SET_PIN_DIR+0xde>
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 c2 03 	jmp	0x784	; 0x784 <__tablejump2__>
{
	case 'A':
	case 'a':
	if (dir == 1 )
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_SET_PIN_DIR+0x32>
	{
		SET_BIT(DDRA,pin);
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SET_PIN_DIR+0x28>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SET_PIN_DIR+0x24>
 14e:	82 2b       	or	r24, r18
 150:	8a bb       	out	0x1a, r24	; 26
 152:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRA,pin);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SET_PIN_DIR+0x3e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SET_PIN_DIR+0x3a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if (dir == 1 )
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <DIO_SET_PIN_DIR+0x64>
	{
		SET_BIT(DDRB,pin);
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SET_PIN_DIR+0x5a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SET_PIN_DIR+0x56>
 180:	82 2b       	or	r24, r18
 182:	87 bb       	out	0x17, r24	; 23
 184:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRB,pin);
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SET_PIN_DIR+0x70>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SET_PIN_DIR+0x6c>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if (dir == 1 )
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_SET_PIN_DIR+0x96>
	{
		SET_BIT(DDRC,pin);
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SET_PIN_DIR+0x8c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SET_PIN_DIR+0x88>
 1b2:	82 2b       	or	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRC,pin);
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SET_PIN_DIR+0xa2>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SET_PIN_DIR+0x9e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if (dir == 1 )
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_SET_PIN_DIR+0xc8>
	{
		SET_BIT(DDRD,pin);
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SET_PIN_DIR+0xbe>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SET_PIN_DIR+0xba>
 1e4:	82 2b       	or	r24, r18
 1e6:	81 bb       	out	0x11, r24	; 17
 1e8:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRD,pin);
 1ea:	21 b3       	in	r18, 0x11	; 17
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SET_PIN_DIR+0xd4>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SET_PIN_DIR+0xd0>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	08 95       	ret

00000202 <DIO_WRITE_PIN>:
	default:break;
}	
}
void DIO_WRITE_PIN(char port , char pin , char val)
{
	switch(port)
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	e1 54       	subi	r30, 0x41	; 65
 208:	f1 09       	sbc	r31, r1
 20a:	e4 32       	cpi	r30, 0x24	; 36
 20c:	f1 05       	cpc	r31, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_WRITE_PIN+0x10>
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <DIO_WRITE_PIN+0xde>
 212:	e2 5b       	subi	r30, 0xB2	; 178
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	0c 94 c2 03 	jmp	0x784	; 0x784 <__tablejump2__>
	{
		case 'A':
		case 'a':
		if (val == 1 )
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <DIO_WRITE_PIN+0x32>
		{
			SET_BIT(PORTA,pin);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WRITE_PIN+0x28>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WRITE_PIN+0x24>
 22e:	82 2b       	or	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WRITE_PIN+0x3e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WRITE_PIN+0x3a>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (val == 1 )
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_WRITE_PIN+0x64>
		{
			SET_BIT(PORTB,pin);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WRITE_PIN+0x5a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WRITE_PIN+0x56>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_WRITE_PIN+0x70>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_WRITE_PIN+0x6c>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (val == 1 )
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <DIO_WRITE_PIN+0x96>
		{
			SET_BIT(PORTC,pin);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WRITE_PIN+0x8c>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WRITE_PIN+0x88>
 292:	82 2b       	or	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WRITE_PIN+0xa2>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WRITE_PIN+0x9e>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (val == 1 )
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_WRITE_PIN+0xc8>
		{
			SET_BIT(PORTD,pin);
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WRITE_PIN+0xbe>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WRITE_PIN+0xba>
 2c4:	82 2b       	or	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_WRITE_PIN+0xd4>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_WRITE_PIN+0xd0>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	08 95       	ret

000002e2 <enable>:
	LCD_send_cmd(LCD_ENTRYMODE);
	_delay_ms(1);
} */
void static enable(void)
{
	DIO_WRITE_PIN('A',EN,1);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f ec       	ldi	r24, 0xCF	; 207
 2ee:	97 e0       	ldi	r25, 0x07	; 7
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <enable+0xe>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <enable+0x14>
 2f6:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_PIN('A',EN,0);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
 302:	8f ec       	ldi	r24, 0xCF	; 207
 304:	97 e0       	ldi	r25, 0x07	; 7
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <enable+0x24>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <enable+0x2a>
 30c:	00 00       	nop
 30e:	08 95       	ret

00000310 <LCD_send_char>:
	_delay_ms(1);
	
}
void LCD_send_char(char data)
{
 310:	cf 93       	push	r28
 312:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	DIO_WRITE_PORT('A',data);
	DIO_WRITE_PIN('A',RS,1);
	enable();
	#elif defined four_bit_mode
	DIO_WRITE_PIN('A',3,READ_BIT(data,4));
 314:	48 2f       	mov	r20, r24
 316:	40 71       	andi	r20, 0x10	; 16
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	55 95       	asr	r21
 320:	47 95       	ror	r20
 322:	55 95       	asr	r21
 324:	47 95       	ror	r20
 326:	55 95       	asr	r21
 328:	47 95       	ror	r20
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e4       	ldi	r24, 0x41	; 65
 32e:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(data,5));
 332:	4c 2f       	mov	r20, r28
 334:	40 72       	andi	r20, 0x20	; 32
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	55 95       	asr	r21
 33a:	47 95       	ror	r20
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	55 95       	asr	r21
 346:	47 95       	ror	r20
 348:	55 95       	asr	r21
 34a:	47 95       	ror	r20
 34c:	64 e0       	ldi	r22, 0x04	; 4
 34e:	81 e4       	ldi	r24, 0x41	; 65
 350:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(data,6));
 354:	4c 2f       	mov	r20, r28
 356:	40 74       	andi	r20, 0x40	; 64
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	04 2e       	mov	r0, r20
 35c:	45 2f       	mov	r20, r21
 35e:	00 0c       	add	r0, r0
 360:	44 1f       	adc	r20, r20
 362:	55 0b       	sbc	r21, r21
 364:	00 0c       	add	r0, r0
 366:	44 1f       	adc	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	65 e0       	ldi	r22, 0x05	; 5
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(data,7));
 372:	4c 2f       	mov	r20, r28
 374:	44 1f       	adc	r20, r20
 376:	44 27       	eor	r20, r20
 378:	44 1f       	adc	r20, r20
 37a:	66 e0       	ldi	r22, 0x06	; 6
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,1);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	81 e4       	ldi	r24, 0x41	; 65
 388:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	enable();
 38c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <enable>
	DIO_WRITE_PIN('A',3,READ_BIT(data,0));
 390:	4c 2f       	mov	r20, r28
 392:	41 70       	andi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e4       	ldi	r24, 0x41	; 65
 398:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(data,1));
 39c:	4c 2f       	mov	r20, r28
 39e:	42 70       	andi	r20, 0x02	; 2
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	55 95       	asr	r21
 3a4:	47 95       	ror	r20
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	81 e4       	ldi	r24, 0x41	; 65
 3aa:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(data,2));
 3ae:	4c 2f       	mov	r20, r28
 3b0:	44 70       	andi	r20, 0x04	; 4
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	55 95       	asr	r21
 3b6:	47 95       	ror	r20
 3b8:	55 95       	asr	r21
 3ba:	47 95       	ror	r20
 3bc:	65 e0       	ldi	r22, 0x05	; 5
 3be:	81 e4       	ldi	r24, 0x41	; 65
 3c0:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(data,3));
 3c4:	c8 70       	andi	r28, 0x08	; 8
 3c6:	4c 2f       	mov	r20, r28
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	55 95       	asr	r21
 3cc:	47 95       	ror	r20
 3ce:	55 95       	asr	r21
 3d0:	47 95       	ror	r20
 3d2:	55 95       	asr	r21
 3d4:	47 95       	ror	r20
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,1);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	81 e4       	ldi	r24, 0x41	; 65
 3e4:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	enable();
 3e8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <enable>
 3ec:	8f ec       	ldi	r24, 0xCF	; 207
 3ee:	97 e0       	ldi	r25, 0x07	; 7
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_send_char+0xe0>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_send_char+0xe6>
 3f6:	00 00       	nop
	_delay_ms(1);
	#endif
}
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <LCD_send_cmd>:
void LCD_send_cmd(char cmd)
{
 3fc:	cf 93       	push	r28
 3fe:	c8 2f       	mov	r28, r24
	DIO_WRITE_PORT('A',cmd);
	DIO_WRITE_PIN('A',RS,0);
	enable();
	_delay_ms(1);
	#elif defined four_bit_mode
	DIO_WRITE_PIN('A',3,READ_BIT(cmd,4));
 400:	48 2f       	mov	r20, r24
 402:	40 71       	andi	r20, 0x10	; 16
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	55 95       	asr	r21
 40c:	47 95       	ror	r20
 40e:	55 95       	asr	r21
 410:	47 95       	ror	r20
 412:	55 95       	asr	r21
 414:	47 95       	ror	r20
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e4       	ldi	r24, 0x41	; 65
 41a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(cmd,5));
 41e:	4c 2f       	mov	r20, r28
 420:	40 72       	andi	r20, 0x20	; 32
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	55 95       	asr	r21
 426:	47 95       	ror	r20
 428:	55 95       	asr	r21
 42a:	47 95       	ror	r20
 42c:	55 95       	asr	r21
 42e:	47 95       	ror	r20
 430:	55 95       	asr	r21
 432:	47 95       	ror	r20
 434:	55 95       	asr	r21
 436:	47 95       	ror	r20
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	81 e4       	ldi	r24, 0x41	; 65
 43c:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(cmd,6));
 440:	4c 2f       	mov	r20, r28
 442:	40 74       	andi	r20, 0x40	; 64
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	04 2e       	mov	r0, r20
 448:	45 2f       	mov	r20, r21
 44a:	00 0c       	add	r0, r0
 44c:	44 1f       	adc	r20, r20
 44e:	55 0b       	sbc	r21, r21
 450:	00 0c       	add	r0, r0
 452:	44 1f       	adc	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	65 e0       	ldi	r22, 0x05	; 5
 458:	81 e4       	ldi	r24, 0x41	; 65
 45a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(cmd,7));
 45e:	4c 2f       	mov	r20, r28
 460:	44 1f       	adc	r20, r20
 462:	44 27       	eor	r20, r20
 464:	44 1f       	adc	r20, r20
 466:	66 e0       	ldi	r22, 0x06	; 6
 468:	81 e4       	ldi	r24, 0x41	; 65
 46a:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,0);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e4       	ldi	r24, 0x41	; 65
 474:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	enable();
 478:	0e 94 71 01 	call	0x2e2	; 0x2e2 <enable>
	DIO_WRITE_PIN('A',3,READ_BIT(cmd,0));
 47c:	4c 2f       	mov	r20, r28
 47e:	41 70       	andi	r20, 0x01	; 1
 480:	63 e0       	ldi	r22, 0x03	; 3
 482:	81 e4       	ldi	r24, 0x41	; 65
 484:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(cmd,1));
 488:	4c 2f       	mov	r20, r28
 48a:	42 70       	andi	r20, 0x02	; 2
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	55 95       	asr	r21
 490:	47 95       	ror	r20
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	81 e4       	ldi	r24, 0x41	; 65
 496:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(cmd,2));
 49a:	4c 2f       	mov	r20, r28
 49c:	44 70       	andi	r20, 0x04	; 4
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	55 95       	asr	r21
 4a2:	47 95       	ror	r20
 4a4:	55 95       	asr	r21
 4a6:	47 95       	ror	r20
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	81 e4       	ldi	r24, 0x41	; 65
 4ac:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(cmd,3));
 4b0:	c8 70       	andi	r28, 0x08	; 8
 4b2:	4c 2f       	mov	r20, r28
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	55 95       	asr	r21
 4b8:	47 95       	ror	r20
 4ba:	55 95       	asr	r21
 4bc:	47 95       	ror	r20
 4be:	55 95       	asr	r21
 4c0:	47 95       	ror	r20
 4c2:	66 e0       	ldi	r22, 0x06	; 6
 4c4:	81 e4       	ldi	r24, 0x41	; 65
 4c6:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,0);
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	81 e4       	ldi	r24, 0x41	; 65
 4d0:	0e 94 01 01 	call	0x202	; 0x202 <DIO_WRITE_PIN>
	enable();
 4d4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <enable>
 4d8:	8f ec       	ldi	r24, 0xCF	; 207
 4da:	97 e0       	ldi	r25, 0x07	; 7
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
	_delay_ms(1);
	#endif
}
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <LCD_intial>:
 4e8:	2f ef       	ldi	r18, 0xFF	; 255
 4ea:	81 ee       	ldi	r24, 0xE1	; 225
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <LCD_intial+0x6>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <LCD_intial+0x10>
 4f8:	00 00       	nop
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	DIO_SET_PIN_DIR('A',3,1);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	81 e4       	ldi	r24, 0x41	; 65
 500:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',4,1);
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	81 e4       	ldi	r24, 0x41	; 65
 50a:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',5,1);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	65 e0       	ldi	r22, 0x05	; 5
 512:	81 e4       	ldi	r24, 0x41	; 65
 514:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',6,1);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	66 e0       	ldi	r22, 0x06	; 6
 51c:	81 e4       	ldi	r24, 0x41	; 65
 51e:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',RS,1);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	81 e4       	ldi	r24, 0x41	; 65
 528:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',EN,1);
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	62 e0       	ldi	r22, 0x02	; 2
 530:	81 e4       	ldi	r24, 0x41	; 65
 532:	0e 94 91 00 	call	0x122	; 0x122 <DIO_SET_PIN_DIR>
	LCD_send_cmd(RETURN_HOME);
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 53c:	8f e1       	ldi	r24, 0x1F	; 31
 53e:	9e e4       	ldi	r25, 0x4E	; 78
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_intial+0x58>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_intial+0x5e>
 546:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BIT);
 548:	88 e2       	ldi	r24, 0x28	; 40
 54a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 54e:	8f ec       	ldi	r24, 0xCF	; 207
 550:	97 e0       	ldi	r25, 0x07	; 7
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <LCD_intial+0x6a>
 556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_intial+0x70>
 558:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CRS_ON_DSP_ON);
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 560:	8f ec       	ldi	r24, 0xCF	; 207
 562:	97 e0       	ldi	r25, 0x07	; 7
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <LCD_intial+0x7c>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_intial+0x82>
 56a:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 572:	8f e1       	ldi	r24, 0x1F	; 31
 574:	9e e4       	ldi	r25, 0x4E	; 78
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCD_intial+0x8e>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <LCD_intial+0x94>
 57c:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 584:	8f ec       	ldi	r24, 0xCF	; 207
 586:	97 e0       	ldi	r25, 0x07	; 7
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_intial+0xa0>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_intial+0xa6>
 58e:	00 00       	nop
 590:	08 95       	ret

00000592 <LCD_clear_screen>:
	_delay_ms(1);
	#endif
}
void LCD_clear_screen()
{
	LCD_send_cmd(0x01);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 598:	08 95       	ret

0000059a <LCD_move_cursor>:
}
void LCD_move_cursor(char row , char coloumn)
{
	char data ;
	if (row>2||row<1||coloumn<1||coloumn>16)
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	98 0f       	add	r25, r24
 59e:	92 30       	cpi	r25, 0x02	; 2
 5a0:	70 f4       	brcc	.+28     	; 0x5be <LCD_move_cursor+0x24>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <LCD_move_cursor+0x28>
 5a6:	61 31       	cpi	r22, 0x11	; 17
 5a8:	70 f4       	brcc	.+28     	; 0x5c6 <LCD_move_cursor+0x2c>
	{
		data = 0x80;
	}
	else if (row == 1 )
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	19 f4       	brne	.+6      	; 0x5b4 <LCD_move_cursor+0x1a>
	{
		data = (0x80+coloumn-1);
 5ae:	2f e7       	ldi	r18, 0x7F	; 127
 5b0:	26 0f       	add	r18, r22
 5b2:	0a c0       	rjmp	.+20     	; 0x5c8 <LCD_move_cursor+0x2e>
	}
	else if (row == 2)
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	41 f4       	brne	.+16     	; 0x5c8 <LCD_move_cursor+0x2e>
	{
		data = (0xc0+coloumn-1);
 5b8:	2f eb       	ldi	r18, 0xBF	; 191
 5ba:	26 0f       	add	r18, r22
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <LCD_move_cursor+0x2e>
void LCD_move_cursor(char row , char coloumn)
{
	char data ;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
		data = 0x80;
 5be:	20 e8       	ldi	r18, 0x80	; 128
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <LCD_move_cursor+0x2e>
 5c2:	20 e8       	ldi	r18, 0x80	; 128
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <LCD_move_cursor+0x2e>
 5c6:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row == 2)
	{
		data = (0xc0+coloumn-1);
	}
	LCD_send_cmd(data);
 5c8:	82 2f       	mov	r24, r18
 5ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_send_cmd>
 5ce:	8f ec       	ldi	r24, 0xCF	; 207
 5d0:	97 e0       	ldi	r25, 0x07	; 7
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_move_cursor+0x38>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_move_cursor+0x3e>
 5d8:	00 00       	nop
 5da:	08 95       	ret

000005dc <LCD_send_string>:
	_delay_ms(1);
}	
void LCD_send_string(char *data)
{
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	ec 01       	movw	r28, r24
	while((*data) != '\0')
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
 5e4:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_char>
		data++;
 5e8:	21 96       	adiw	r28, 0x01	; 1
	LCD_send_cmd(data);
	_delay_ms(1);
}	
void LCD_send_string(char *data)
{
	while((*data) != '\0')
 5ea:	88 81       	ld	r24, Y
 5ec:	81 11       	cpse	r24, r1
 5ee:	fa cf       	rjmp	.-12     	; 0x5e4 <LCD_send_string+0x8>
	{
		LCD_send_char(*data);
		data++;
	}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <main>:
#define F_CPU 1000000UL
#include <util/delay.h>
unsigned short a,b,width,Distance ; 
int main(void)
{
	LCD_intial();
 5f6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_intial>
	SET_BIT(DDRD,5);/*for triggering pin */
 5fa:	81 b3       	in	r24, 0x11	; 17
 5fc:	80 62       	ori	r24, 0x20	; 32
 5fe:	81 bb       	out	0x11, r24	; 17
	//LCD_send_string("Distance=");
    while (1) 
    {
		/* configure triggering pin*/
		SET_BIT(PORTD,5);
 600:	82 b3       	in	r24, 0x12	; 18
 602:	80 62       	ori	r24, 0x20	; 32
 604:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 606:	2a e1       	ldi	r18, 0x1A	; 26
 608:	2a 95       	dec	r18
 60a:	f1 f7       	brne	.-4      	; 0x608 <main+0x12>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x18>
	    _delay_us(10);
	    CLR_BIT(PORTD,5);
 60e:	82 b3       	in	r24, 0x12	; 18
 610:	8f 7d       	andi	r24, 0xDF	; 223
 612:	82 bb       	out	0x12, r24	; 18
		SET_BIT(TIFR,ICF1);/*clear flag bit */
 614:	88 b7       	in	r24, 0x38	; 56
 616:	80 62       	ori	r24, 0x20	; 32
 618:	88 bf       	out	0x38, r24	; 56
		TCCR1B = 0xc1;/* Rising edge, no prescaler , noise canceler*/
 61a:	81 ec       	ldi	r24, 0xC1	; 193
 61c:	8e bd       	out	0x2e, r24	; 46
		while(READ_BIT(TIFR,ICF1)==0);
 61e:	08 b6       	in	r0, 0x38	; 56
 620:	05 fe       	sbrs	r0, 5
 622:	fd cf       	rjmp	.-6      	; 0x61e <main+0x28>
		a = ICR1 ; /* Take value of capture register */
 624:	86 b5       	in	r24, 0x26	; 38
 626:	97 b5       	in	r25, 0x27	; 39
 628:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <a+0x1>
 62c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <a>
		SET_BIT(TIFR,ICF1);/*clear flag bit */
 630:	88 b7       	in	r24, 0x38	; 56
 632:	80 62       	ori	r24, 0x20	; 32
 634:	88 bf       	out	0x38, r24	; 56
		TCCR1B = 0x81;/* Falling edge, no prescaler , noise canceler*/
 636:	81 e8       	ldi	r24, 0x81	; 129
 638:	8e bd       	out	0x2e, r24	; 46
		while(READ_BIT(TIFR,ICF1)==0);
 63a:	08 b6       	in	r0, 0x38	; 56
 63c:	05 fe       	sbrs	r0, 5
 63e:	fd cf       	rjmp	.-6      	; 0x63a <main+0x44>
		b = ICR1 ; /* Take value of capture register */
 640:	86 b5       	in	r24, 0x26	; 38
 642:	97 b5       	in	r25, 0x27	; 39
 644:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 648:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
		TCCR1B = 0; /* Stop the timer */
 64c:	1e bc       	out	0x2e, r1	; 46
		width= b-a ;
 64e:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__data_end>
 652:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <__data_end+0x1>
 656:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <a>
 65a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <a+0x1>
 65e:	28 1b       	sub	r18, r24
 660:	39 0b       	sbc	r19, r25
 662:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <width+0x1>
 666:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <width>
		Distance = ((width*34600)/(F_CPU*2)) ;
 66a:	a8 e2       	ldi	r26, 0x28	; 40
 66c:	b7 e8       	ldi	r27, 0x87	; 135
 66e:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 672:	20 e8       	ldi	r18, 0x80	; 128
 674:	34 e8       	ldi	r19, 0x84	; 132
 676:	4e e1       	ldi	r20, 0x1E	; 30
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodsi4>
 67e:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <Distance+0x1>
 682:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <Distance>
		if (Distance>80)
 686:	21 35       	cpi	r18, 0x51	; 81
 688:	31 05       	cpc	r19, r1
 68a:	80 f0       	brcs	.+32     	; 0x6ac <main+0xb6>
		{
			LCD_clear_screen();
 68c:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_clear_screen>
			LCD_send_string("Out of range");
 690:	80 e6       	ldi	r24, 0x60	; 96
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 698:	3f ef       	ldi	r19, 0xFF	; 255
 69a:	81 ee       	ldi	r24, 0xE1	; 225
 69c:	94 e0       	ldi	r25, 0x04	; 4
 69e:	31 50       	subi	r19, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0xa8>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0xb2>
 6a8:	00 00       	nop
 6aa:	aa cf       	rjmp	.-172    	; 0x600 <main+0xa>
			_delay_ms(200);
		}
		else
		{
			LCD_clear_screen();
 6ac:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_clear_screen>
			LCD_send_string("Distance=");
 6b0:	8d e6       	ldi	r24, 0x6D	; 109
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_send_string>
			LCD_move_cursor(1,10);
 6b8:	6a e0       	ldi	r22, 0x0A	; 10
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_move_cursor>
			LCD_send_char((Distance/10)+48);
 6c0:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <Distance>
 6c4:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <Distance+0x1>
 6c8:	ad ec       	ldi	r26, 0xCD	; 205
 6ca:	bc ec       	ldi	r27, 0xCC	; 204
 6cc:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	80 5d       	subi	r24, 0xD0	; 208
 6de:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_char>
			LCD_send_char((Distance%10)+48);
 6e2:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <Distance>
 6e6:	50 91 7d 00 	lds	r21, 0x007D	; 0x80007d <Distance+0x1>
 6ea:	9a 01       	movw	r18, r20
 6ec:	ad ec       	ldi	r26, 0xCD	; 205
 6ee:	bc ec       	ldi	r27, 0xCC	; 204
 6f0:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	96 95       	lsr	r25
 6fe:	87 95       	ror	r24
 700:	9c 01       	movw	r18, r24
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	9a 01       	movw	r18, r20
 718:	28 1b       	sub	r18, r24
 71a:	39 0b       	sbc	r19, r25
 71c:	c9 01       	movw	r24, r18
 71e:	80 5d       	subi	r24, 0xD0	; 208
 720:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_char>
			LCD_send_string("cm");
 724:	87 e7       	ldi	r24, 0x77	; 119
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_send_string>
 72c:	3f ef       	ldi	r19, 0xFF	; 255
 72e:	81 ee       	ldi	r24, 0xE1	; 225
 730:	94 e0       	ldi	r25, 0x04	; 4
 732:	31 50       	subi	r19, 0x01	; 1
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	90 40       	sbci	r25, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <main+0x13c>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0x146>
 73c:	00 00       	nop
 73e:	60 cf       	rjmp	.-320    	; 0x600 <main+0xa>

00000740 <__udivmodsi4>:
 740:	a1 e2       	ldi	r26, 0x21	; 33
 742:	1a 2e       	mov	r1, r26
 744:	aa 1b       	sub	r26, r26
 746:	bb 1b       	sub	r27, r27
 748:	fd 01       	movw	r30, r26
 74a:	0d c0       	rjmp	.+26     	; 0x766 <__udivmodsi4_ep>

0000074c <__udivmodsi4_loop>:
 74c:	aa 1f       	adc	r26, r26
 74e:	bb 1f       	adc	r27, r27
 750:	ee 1f       	adc	r30, r30
 752:	ff 1f       	adc	r31, r31
 754:	a2 17       	cp	r26, r18
 756:	b3 07       	cpc	r27, r19
 758:	e4 07       	cpc	r30, r20
 75a:	f5 07       	cpc	r31, r21
 75c:	20 f0       	brcs	.+8      	; 0x766 <__udivmodsi4_ep>
 75e:	a2 1b       	sub	r26, r18
 760:	b3 0b       	sbc	r27, r19
 762:	e4 0b       	sbc	r30, r20
 764:	f5 0b       	sbc	r31, r21

00000766 <__udivmodsi4_ep>:
 766:	66 1f       	adc	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	1a 94       	dec	r1
 770:	69 f7       	brne	.-38     	; 0x74c <__udivmodsi4_loop>
 772:	60 95       	com	r22
 774:	70 95       	com	r23
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	9b 01       	movw	r18, r22
 77c:	ac 01       	movw	r20, r24
 77e:	bd 01       	movw	r22, r26
 780:	cf 01       	movw	r24, r30
 782:	08 95       	ret

00000784 <__tablejump2__>:
 784:	ee 0f       	add	r30, r30
 786:	ff 1f       	adc	r31, r31
 788:	05 90       	lpm	r0, Z+
 78a:	f4 91       	lpm	r31, Z
 78c:	e0 2d       	mov	r30, r0
 78e:	09 94       	ijmp

00000790 <__umulhisi3>:
 790:	a2 9f       	mul	r26, r18
 792:	b0 01       	movw	r22, r0
 794:	b3 9f       	mul	r27, r19
 796:	c0 01       	movw	r24, r0
 798:	a3 9f       	mul	r26, r19
 79a:	70 0d       	add	r23, r0
 79c:	81 1d       	adc	r24, r1
 79e:	11 24       	eor	r1, r1
 7a0:	91 1d       	adc	r25, r1
 7a2:	b2 9f       	mul	r27, r18
 7a4:	70 0d       	add	r23, r0
 7a6:	81 1d       	adc	r24, r1
 7a8:	11 24       	eor	r1, r1
 7aa:	91 1d       	adc	r25, r1
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
